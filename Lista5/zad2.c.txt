#include <sys/types.h>
#include <sys/ipc.h>
#include <sys/shm.h>
#include <sys/sem.h>
#include <stdio.h>
#include <unistd.h>
#include <pthread.h>

static struct sembuf buff;

#define MAX 5

int semid;

int m=-1;

void podnies(int semid, int semnum){
	buff.sem_num = semnum;
	buff.sem_op = 1;
	buff.sem_flg = 0;
	semop(semid, &buff, 1);
}

void opusc(int semid, int semnum){
	buff.sem_num = semnum;
	buff.sem_op = -1;
	buff.sem_flg = 0;
	semop(semid, &buff, 1);
}

void* funkcja(void* _arg){
	int t = ++m;
	for(int i=0 ; i<10000 ; i++){
		opusc(semid, t);
		opusc(semid, (t+1)%5);
			printf("Filozof %d\n", t);
			sleep(2);
		podnies(semid, (t+1)%5);
		podnies(semid, t);
	}
}

main(){
	int shmid, i;
	int *buf;

	int widelec[5];
	
	semid = semget(45281, MAX, IPC_CREAT|0600);
	
	semctl(semid, 0, SETVAL, (int)1);
	semctl(semid, 1, SETVAL, (int)1);
	semctl(semid, 2, SETVAL, (int)1);
	semctl(semid, 3, SETVAL, (int)1);
	semctl(semid, 4, SETVAL, (int)1);

	shmid = shmget(45281, (MAX+2)*sizeof(int), IPC_CREAT|0600);

	buf = (int*)shmat(shmid, 0, 0);

	pthread_t thr[5];
	for(int j=0 ; j<5 ; j++) {
		pthread_create(&thr[j], NULL, funkcja, NULL);
		sleep(1);
	}

	for(int j=0 ; j<5 ; j++) {
		pthread_join(thr[j], NULL);
	}